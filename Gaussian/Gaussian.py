# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Gaussian
else:
    import _Gaussian

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Gaussian.delete_SwigPyIterator

    def value(self):
        return _Gaussian.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Gaussian.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Gaussian.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Gaussian.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Gaussian.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Gaussian.SwigPyIterator_copy(self)

    def next(self):
        return _Gaussian.SwigPyIterator_next(self)

    def __next__(self):
        return _Gaussian.SwigPyIterator___next__(self)

    def previous(self):
        return _Gaussian.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Gaussian.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Gaussian.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Gaussian.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Gaussian.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Gaussian.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Gaussian.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Gaussian.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Gaussian:
_Gaussian.SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Gaussian.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Gaussian.FloatVector___nonzero__(self)

    def __bool__(self):
        return _Gaussian.FloatVector___bool__(self)

    def __len__(self):
        return _Gaussian.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _Gaussian.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Gaussian.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Gaussian.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Gaussian.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Gaussian.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Gaussian.FloatVector___setitem__(self, *args)

    def pop(self):
        return _Gaussian.FloatVector_pop(self)

    def append(self, x):
        return _Gaussian.FloatVector_append(self, x)

    def empty(self):
        return _Gaussian.FloatVector_empty(self)

    def size(self):
        return _Gaussian.FloatVector_size(self)

    def swap(self, v):
        return _Gaussian.FloatVector_swap(self, v)

    def begin(self):
        return _Gaussian.FloatVector_begin(self)

    def end(self):
        return _Gaussian.FloatVector_end(self)

    def rbegin(self):
        return _Gaussian.FloatVector_rbegin(self)

    def rend(self):
        return _Gaussian.FloatVector_rend(self)

    def clear(self):
        return _Gaussian.FloatVector_clear(self)

    def get_allocator(self):
        return _Gaussian.FloatVector_get_allocator(self)

    def pop_back(self):
        return _Gaussian.FloatVector_pop_back(self)

    def erase(self, *args):
        return _Gaussian.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _Gaussian.FloatVector_swiginit(self, _Gaussian.new_FloatVector(*args))

    def push_back(self, x):
        return _Gaussian.FloatVector_push_back(self, x)

    def front(self):
        return _Gaussian.FloatVector_front(self)

    def back(self):
        return _Gaussian.FloatVector_back(self)

    def assign(self, n, x):
        return _Gaussian.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _Gaussian.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _Gaussian.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _Gaussian.FloatVector_reserve(self, n)

    def capacity(self):
        return _Gaussian.FloatVector_capacity(self)
    __swig_destroy__ = _Gaussian.delete_FloatVector

# Register FloatVector in _Gaussian:
_Gaussian.FloatVector_swigregister(FloatVector)

class Gaussian(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mean_value=0, sigma_value=1, num_events_value=10):
        _Gaussian.Gaussian_swiginit(self, _Gaussian.new_Gaussian(mean_value, sigma_value, num_events_value))
    __swig_destroy__ = _Gaussian.delete_Gaussian

    def dump(self):
        return _Gaussian.Gaussian_dump(self)

    def dump_params(self):
        return _Gaussian.Gaussian_dump_params(self)

    def dump_real_params(self):
        return _Gaussian.Gaussian_dump_real_params(self)

    def generate(self):
        return _Gaussian.Gaussian_generate(self)

    def Mean(self):
        return _Gaussian.Gaussian_Mean(self)

    def Variance(self):
        return _Gaussian.Gaussian_Variance(self)

    def stDev(self):
        return _Gaussian.Gaussian_stDev(self)

    def get_values(self):
        return _Gaussian.Gaussian_get_values(self)

# Register Gaussian in _Gaussian:
_Gaussian.Gaussian_swigregister(Gaussian)



